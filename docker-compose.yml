---
version: '2.2'
services:
  local-azure:
    image: mcr.microsoft.com/azure-storage/azurite
  azcli:
    image: mcr.microsoft.com/azure-cli
    entrypoint: az
    environment:
      - AZURE_CORE_OUTPUT=json
    volumes:
      - $HOME/.azure:/root/.azure
  gpg-infra:
    image: vladgh/gpg
    volumes:
      - $PWD/infra:/workdir
    working_dir: /workdir
  python:
    build:
      context: ./hello_azure_app
  ansible-with-systemd:
    tty: true # colores!
    privileged: true
    build:
      dockerfile: ansible.Dockerfile
      context: .
    environment:
      ANSIBLE_RETRY_FILES_ENABLED: 0
      ANSIBLE_STDOUT_CALLBACK: debug
      ANSIBLE_HOST_KEY_CHECKING: "false"
    volumes:
      - $PWD:/app:ro,cached # Needed so that we don't have to copy the app into the container every time.
      - $PWD/infra:/workdir:ro,cached
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    working_dir: /workdir
  packer:
    extends: ansible-with-systemd
    volumes:
      - $PWD/infra:/workdir:ro,cached
      - $PWD/scripts:/scripts:ro,cached
      - $PWD/secrets:/secrets:cached
    working_dir: /workdir
    env_file: infra/.env
    entrypoint: sh /scripts/build_image_from_packer_template.sh
  prom_database:
    image: postgres:alpine
    env_file: ./monitoring/prometheus/.env.test
    ports:
      - 5432
  prometheus:
    depends_on:
      - prom_database
    image: prom/prometheus
    volumes:
      - $PWD/monitoring/prometheus:/etc/prometheus
    ports:
      - 9090:9090
  prom_persistence_check:
    image: alpine
    entrypoint: sh
    command:
      - -c
      - "nc -z prom_database 5432"
  prom_monitoring_check:
    image: alpine
    entrypoint: sh
    command:
      - -c
      - "nc -z prometheus 9090"
  grafana:
    depends_on:
      - graf_database
      - graf_cache
    env_file: ./monitoring/grafana/.env.test
    image: grafana/grafana
    volumes:
      - $PWD/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - $PWD/monitoring/certs:/certs
      - $PWD/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - 3000:3000
  graf_cache:
    image: redis:alpine
    volumes:
      - $PWD/redis:/data
    ports:
      - 6379
  graf_database:
    image: postgres:alpine
    env_file: ./monitoring/grafana/.env.test
    ports:
      - 5432
  graf_persistence_check:
    image: alpine
    entrypoint: sh
    command:
      - -c
      - "nc -z graf_database 5432 && nc -z graf_cache 6379"
  graf_monitoring_check:
    image: alpine
    entrypoint: sh
    command:
      - -c
      - "nc -z grafana 3000"
  terraform:
    build:
      dockerfile: terraform.Dockerfile
      context: .
    volumes:
      - $PWD/infra:/infra:cached
      - $PWD/scripts:/scripts:ro,cached
      - $PWD/secrets:/secrets:cached
    working_dir: /infra
    env_file: infra/.env
    environment:
      - TF_CLI_ARGS_apply="-auto-approve"
      - TF_CLI_ARGS_destroy="-force"
    entrypoint:
      - sh
      - /scripts/execute_terraform.sh
  blobstore:
    extends: local-azure
    entrypoint: azurite-blob
    ports:
      - 10000:10000
    command:
      - azurite-blob
      - -d
      - debug.log
      - --blobHost
      - 0.0.0.0
      - --blobPort
      - "10000"
  database:
    image: postgres:alpine
    env_file: .env.test
    volumes:
      - $PWD/scripts/db_init:/docker-entrypoint-initdb.d
    ports:
      - 5432
  app_persistence_check:
    image: alpine
    entrypoint: sh
    command:
      - -c
      - "nc -z blobstore 10000 && nc -z database 5432"
  hello-azure:
    tty: true # colores!
    depends_on:
      - database
      - blobstore
      - prometheus
      - grafana
    extends: python
    env_file: .env.test
    ports:
      - 80:5000
    entrypoint: python
    command: hello_azure.py
  init-database:
    depends_on:
      - database
    extends: database
    entrypoint: sh
    env_file: .env.test
    volumes:
      - $PWD:/app:ro,cached
    working_dir: /app
    command:
      - -c
      - scripts/load_database.sh
  init-blobstore:
    depends_on:
      - blobstore
    extends: azcli
    entrypoint: sh
    env_file: .env.test
    volumes:
      - $PWD:/app:ro,cached
    working_dir: /app
    command:
      - -c
      - scripts/load_blobstore.sh
  encrypt-infra-env:
    extends: gpg-infra
    command:
      - --batch
      - --yes
      - --passphrase=$ENV_PASSWORD
      - --output=env.gpg
      - --symmetric
      - .env
  decrypt-infra-env:
    extends: gpg-infra
    command:
      - --decrypt
      - --batch
      - --yes
      - --passphrase=$ENV_PASSWORD
      - --output=.env
      - env.gpg
  ansible-test-webservers:
    depends_on:
      - database
      - blobstore
    extends: ansible-with-systemd
    env_file: .env.test
  ansible-test-databases:
    extends: ansible-with-systemd
    env_file: .env.test
  lint:
    extends: python
    entrypoint: pylint
    volumes:
      - "$PWD:/app:cached"
    command:
      - -E
  ansible-local:
    image: williamyeh/ansible:alpine3
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"
    network_mode: host
    
